logger.scala.slick.session=DEBUG
logger.scala.slick=DEBUG

db.default.logSql=true

# These settings are read by slick.util.SlickConfig
# See: https://scala-slick.org/doc/3.3.2/config.html
slick {
  # Use ANSI color sequences in tree dumps (as used in log messages and
  # exceptions of type SlickTreeException).
  ansiDump = false

  # Use Unicode box characters in tree and table dumps (as used in log
  # messages). If this option is not enabled, ASCII approximations are used
  # instead.
  unicodeDump = false

  # Dump individual "Select" and "Ref" nodes instead of combining them into a
  # single "Path" element when creating a tree dump (as used in log messages
  # and exceptions of type SlickTreeException).
  dumpPaths = false

  # Use multi-line, indented formatting for SQL statements. If not enabled,
  # statements are generated without any linebreaks or indentation. This
  # option applies to all generated statements (but not to the Plain SQL API).
  sqlIndent = true

  # Verify types after each query compiler phase. This is useful for debugging
  # the query compiler but should generally not be enabled in production
  # environments because it makes query compilation considerably slower.
  verifyTypes = false

  # Detect unnecessary rebuilding of the AST after every query compiler phase.
  # This is useful for debugging the query compiler. Query compilation
  # performance is negatively affected by this if phase logging is enabled.
  detectRebuild = false
}

postgres = {
  profile = "slick.jdbc.PostgresProfile$"
  // Simple datasource with no connection pooling. The connection pool has
  // already been specified with HikariCP.
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  poolName = WorkOrderStoragePool
//  properties = {
//    url = "jdbc:postgresql://localhost:5432/testdb?stringtype=unspecified&currentSchema=datafabric_workorder"
//    user = test
//    password = testpass
//    serverName = "localhost"
//    portNumber = "5432"
//    databaseName = "caeadom"
//    user = "caeadom"
//    password = "caeadom"
//    currentSchema = datafabric_workorder
//  }
  poolName = WorkOrderStoragePool
  db {
;   connectionPool = disabled
  connectionPool = "HikariCP" //use HikariCP for our connection pool


    # set postgres URL. Use stringtype=unspecified to indicate strings should be
    # inferred. Remove problem with storing JSON string into JSONB column
    # Defaulting to the development instance using "dev-tools/docker-compose.yml"
    url = "jdbc:postgresql://localhost:5432/caeadom?stringtype=unspecified"
    ##&searchpath=datafabric_workorder"
    user = caeadom
    password = ""
  }
}

//postgres.profile = "slick.jdbc.PostgresProfile$"
//postgres.db.minimumIdle = 5
//postgres.db.maxPoolSize = 4
//postgres.db.minPoolSize = 2
//postgres.db.idleTimeout=30000
//postgres.db.poolName=WorkOrderStoragePool
//postgres.db.maxLifetime=2000000
//postgres.db.connectionTimeout=30000
//postgres.db.keepAliveConnection = true
//postgres.db.driver = org.postgresql.Driver
//# set postgres URL. Use stringtype=unspecified to indicate strings should be
//# inferred. Remove problem with storing JSON string into JSONB column
//# Defaulting to the development instance using "dev-tools/docker-compose.yml"
//postgres.db.url = "jdbc:postgresql://localhost:5432/testdb?stringtype=unspecified&currentSchema=datafabric_workorder"
//postgres.db.user = test
//postgres.db.password = testpass


h2mem = {
  profile = "slick.jdbc.H2Profile$"
  db = {
    // https://coderwall.com/p/a2vnxg/proper-configuration-of-h2-with-scala-slick-for-testing
    // DATABASE_TO_UPPER=FALSE => tell H2 NOT to upperCase everything
    // DB_CLOSE_DELAY=-1 => keep database in memory as long as the JVM lives
    //                      and not as long as the session lives
    url = "jdbc:h2:mem:testdb;MODE=MSSQLServer;DB_CLOSE_DELAY=-1;LOCK_TIMEOUT=1000;DATABASE_TO_UPPER=FALSE;INIT=runscript from 'src/main/resources/create-schema.sql'"
    driver = "org.h2.Driver"
    keepAliveConnection = true
    numThreads = 2
    maxConnections = 2
    minConnections = 1
    connectionTimeout = 10000
    initializationFailFast = false
  }
}
