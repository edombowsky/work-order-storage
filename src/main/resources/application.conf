logger.scala.slick.session=DEBUG
logger.scala.slick=DEBUG

db.default.logSql=true

# These settings are read by slick.util.SlickConfig
# See: https://scala-slick.org/doc/3.3.2/config.html
slick {
  # Use ANSI color sequences in tree dumps (as used in log messages and
  # exceptions of type SlickTreeException).
  ansiDump = false

  # Use Unicode box characters in tree and table dumps (as used in log
  # messages). If this option is not enabled, ASCII approximations are used
  # instead.
  unicodeDump = false

  # Dump individual "Select" and "Ref" nodes instead of combining them into a
  # single "Path" element when creating a tree dump (as used in log messages
  # and exceptions of type SlickTreeException).
  dumpPaths = false

  # Use multi-line, indented formatting for SQL statements. If not enabled,
  # statements are generated without any linebreaks or indentation. This
  # option applies to all generated statements (but not to the Plain SQL API).
  sqlIndent = true

  # Verify types after each query compiler phase. This is useful for debugging
  # the query compiler but should generally not be enabled in production
  # environments because it makes query compilation considerably slower.
  verifyTypes = false

  # Detect unnecessary rebuilding of the AST after every query compiler phase.
  # This is useful for debugging the query compiler. Query compilation
  # performance is negatively affected by this if phase logging is enabled.
  detectRebuild = false
}

// Defaults
POSTGRES_SERVER = "localhost"
POSTGRES_DB = "caeadom"
POSTGRES_PORT = "5432"
POSTGRES_USER = "caeadom"
POSTGRES_PASSWORD = ""

database = {
  profile = "slick.jdbc.PostgresProfile$"
  // Simple datasource with no connection pooling. The connection pool has
  // already been specified with HikariCP.
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  db {
    connectionPool = "HikariCP" //use HikariCP for our connection pool or "disabled"
    poolName = WorkOrderStoragePool
    minimumIdle = 5
    maxPoolSize = 4
    minPoolSize = 2
    idleTimeout=30000
    maxLifetime=2000000
    connectionTimeout=30000
    keepAliveConnection = true

    # set postgres URL. Use stringtype=unspecified to indicate strings should be
    # inferred. Remove problem with storing JSON string into JSONB column
    # Defaulting to the development instance using "dev-tools/docker-compose.yml"
    url = "jdbc:postgresql://"${?POSTGRES_SERVER}":"${?POSTGRES_PORT}"/"${?POSTGRES_DB}"?stringtype=unspecified&currentSchema=datafabric_workorder"

    user = ${?POSTGRES_USER}
    password = ${?POSTGRES_PASSWORD}
  }
}
